# Unique name for this workflow
name: "[PUSH] Create and Install Package in DEVHOT"

# Definition when the workflow should run
on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - "force-app/**"

# Jobs to be executed
jobs:
  create-package:
    name: Create new package
    runs-on: ubuntu-latest
    steps:
      # Install SFDX
      - name: Install SFDX
        uses: sfdx-actions/setup-sfdx@v1

      # Checkout the code in the pull request
      - name: "Checkout source code"
        uses: actions/checkout@v2

      # Authenticate prod
      - name: Authenticate prod
        run: |
          echo ${{ secrets.PROD_SFDX_URL}} > ./PROD_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./PROD_SFDX_URL.txt -a devhub -d
          rm -f ./PROD_SFDX_URL.txt

      # Authenticate DEVHOT
      - name: Authenticate DEVHOT
        run: |
          echo ${{ secrets.DEVHOT_SFDX_URL}} > ./DEVHOT_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./DEVHOT_SFDX_URL.txt -a dev -s
          rm -f ./DEVHOT_SFDX_URL.txt

      # Delete unpackagable and scratch-org folder
      - name: "Delete unpackagable"
        run: |
          rm -rf ./force-app/unpackagable
          rm -rf ./force-app/unpackagable-with-auto-deploy
          rm -rf ./force-app/scratch-org

      # Create package version
      - name: "Create package version"
        id: package-version-create
        run: |
          sfdx force:package:version:create -f config/project-scratch-def.json -p crm-hot-dev -k ${{ secrets.PACKAGE_KEY }} -w 90 --json | tee output
          echo "::set-output name=result::$(cat output | jq -c .)"

          status=$(cat output |jq '.status')
          if [ $status == "0" ]
          then
            echo "::set-output name=isSuccess::true"
          else
            exit 125
          fi
          rm output

      # Extract data from package version create result
      - name: "Extract package:version:create result data"
        id: extract-data-package-version-create
        uses: muenzpraeger/github-action-extract-sfdx-packaging-result@master
        with:
          json: ${{steps.package-version-create.outputs.result}}

      # Install sfpowerkit plugin used to install multiple packages only by version number
      - name: Install sfpowerkit plugin
        run: echo y | sfdx plugins:install sfpowerkit

      # Get package keys
      - name: Get package keys
        id: install-keys
        run: |
          keys=""
          for p in $(jq '.result | .[].Name' -r <<< "$(sfdx force:package:list --json)"); do
              keys+=$p":${{ secrets.PACKAGE_KEY }} "
          done
          echo "::set-output name=keys::$(echo $keys)"

      # Install dependant packages to dev sandbox
      - name: Install dependant packages to dev sandbox
        run: sfdx sfpowerkit:package:dependencies:install -u dev -r -a -w 60 -k '${{ steps.install-keys.outputs.keys }}'

      # Install package in dev sandbox org
      - name: Install package in dev sandbox org
        run: sfdx force:package:install --package ${{ steps.extract-data-package-version-create.outputs.packageVersionId }} -k ${{ secrets.PACKAGE_KEY }} -u dev -w 10 -b 10 -r

      # Deploy unpackagable content to dev sandbox org
      - name: Deploy unpackagable content to dev sandbox org
        run: |
          if [ -d "./force-app/unpackagable-with-auto-deploy" ]; then
            echo "Starting deployment of ./force-app/unpackagable-with-auto-deploy"
            sfdx force:source:deploy -p ./force-app/unpackagable-with-auto-deploy -u dev -l RunLocalTests
          fi
