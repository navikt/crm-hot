public without sharing class HOT_AssignedResourceHandler extends MyTriggers {
    public override void onBeforeInsert() {
        setResourceFieldsOnServiceAppointment((List<AssignedResource>) records);
        throwExceptionIfARHasSAOverlap((List<AssignedResource>) records, false);
    }
    public override void onBeforeUpdate(Map<Id, sObject> triggerOldMap) {
        List<AssignedResource> assignedResourcesFiltered = new List<AssignedResource>();
        for (AssignedResource assignedResource : (List<AssignedResource>) records) {
            if (assignedResource.ServiceResourceId != triggerOldMap.get(assignedResource.Id).get('ServiceResourceId')) {
                assignedResourcesFiltered.add(assignedResource);
            }
        }
        if (assignedResourcesFiltered.size() > 0) {
            setResourceFieldsOnServiceAppointment(assignedResourcesFiltered);
            throwExceptionIfARHasSAOverlap(assignedResourcesFiltered, true);
        }
    }

    public override void onAfterInsert() {
        List<ServiceAppointment> serviceAppointments = setServiceResourceFieldsOnServiceAppointment(
            (List<AssignedResource>) records
        );
        update serviceAppointments;
        List<HOT_InterestedResource__c> interestedResource = createInterestedResources(
            (List<AssignedResource>) records
        );
        insert interestedResource;
        List<HOT_InterestedResource__c> interestedResources = updateInterestedResourceStatus(
            (List<AssignedResource>) records
        );
        update interestedResources;
    }

    public override void onAfterUpdate(Map<Id, sObject> triggerOldMap) {
        List<AssignedResource> assignedResourcesFiltered = new List<AssignedResource>();
        for (AssignedResource assignedResource : (List<AssignedResource>) records) {
            if (assignedResource.ServiceResourceId != triggerOldMap.get(assignedResource.Id).get('ServiceResourceId')) {
                assignedResourcesFiltered.add(assignedResource);
            }
        }
        if (assignedResourcesFiltered.size() > 0) {
            notifyResource((List<AssignedResource>) triggerOldMap.values());

            List<ServiceAppointment> serviceAppointments = setServiceResourceFieldsOnServiceAppointment(
                (List<AssignedResource>) records
            );
            update serviceAppointments;
            List<HOT_InterestedResource__c> interestedResource = createInterestedResources(
                (List<AssignedResource>) records
            );
            insert interestedResource;
            List<HOT_InterestedResource__c> interestedResources = updateInterestedResourceStatus(
                (List<AssignedResource>) records
            );
            update interestedResources;
        }
    }

    public List<ServiceAppointment> setServiceResourceFieldsOnServiceAppointment(List<AssignedResource> records) {
        //Creates Map and List for SOQL and reference later
        Map<Id, AssignedResource> assignedResourceByServiceAppointmentId = new Map<Id, AssignedResource>();
        List<Id> serviceResourceIds = new List<Id>();
        for (AssignedResource ar : (List<AssignedResource>) records) {
            assignedResourceByServiceAppointmentId.put(ar.ServiceAppointmentId, ar);
            serviceResourceIds.add(ar.ServiceResourceId);
        }

        //Fetches ServiceAppointments to be updated and userId of the ServiceResources
        List<ServiceAppointment> serviceAppointments = [
            SELECT Id, HOT_AssignedResourceId__c, HOT_ServiceResource__c
            FROM ServiceAppointment
            WHERE Id IN :assignedResourceByServiceAppointmentId.keySet()
        ];
        Map<Id, ServiceResource> serviceResourceById = new Map<Id, ServiceResource>(
            [SELECT Id, RelatedRecordId, Name FROM ServiceResource WHERE Id IN :serviceResourceIds]
        );

        //Setting fields on ServiceAppointment
        for (ServiceAppointment sa : serviceAppointments) {
            Id serviceResourceId = assignedResourceByServiceAppointmentId.get(sa.Id).ServiceResourceId;
            sa.HOT_ServiceResource__c = serviceResourceId;
            sa.HOT_AssignedResourceId__c = serviceResourceById.get(serviceResourceId).RelatedRecordId;
        }
        return serviceAppointments;
    }

    public override void onAfterDelete() {
        List<Id> serviceAppointmentIds = new List<Id>();
        for (AssignedResource ar : (List<AssignedResource>) records) {
            serviceAppointmentIds.add(ar.ServiceAppointmentId);
        }
        List<ServiceAppointment> serviceAppointments = [
            SELECT Id, HOT_ResetToDefault__c, HOT_AssignedResourceId__c, HOT_ServiceResource__c
            FROM ServiceAppointment
            WHERE Id IN :serviceAppointmentIds
        ];

        for (ServiceAppointment sa : serviceAppointments) {
            sa.HOT_AssignedResourceId__c = null;
            sa.HOT_ServiceResource__c = null;
            sa.HOT_ResetToDefault__c = true;
        }
        update serviceAppointments;
        update HOT_AssignedResourceAccessHandler.setRecalculateManualSharingFlagOnServiceAppointment(
            serviceAppointmentIds
        );
    }

    List<HOT_InterestedResource__c> createInterestedResources(List<AssignedResource> records) {
        List<HOT_InterestedResource__c> interestedResources = new List<HOT_InterestedResource__c>();

        //Creates map to be used in query of InterestedResources
        Map<Id, Id> serviceResourceIdByServiceAppointmentId = new Map<Id, Id>();
        for (AssignedResource assignedResource : records) {
            serviceResourceIdByServiceAppointmentId.put(
                assignedResource.ServiceAppointmentId,
                assignedResource.ServiceResourceId
            );
        }
        //Fetches possible matches with Interested Resources
        List<HOT_InterestedResource__c> existingInterestedResources = [
            SELECT Id, ServiceAppointment__c, ServiceResource__c
            FROM HOT_InterestedResource__c
            WHERE
                ServiceAppointment__c IN :serviceResourceIdByServiceAppointmentId.keySet()
                AND ServiceResource__c IN :serviceResourceIdByServiceAppointmentId.values()
        ];
        //Fetches Freelance interpreters included in the assigned resource records, and gets their Ids
        List<ServiceResource> serviceResources = [
            SELECT Id
            FROM ServiceResource
            WHERE Id IN :serviceResourceIdByServiceAppointmentId.values() AND HOT_IsFreelanceInterpreter__c = TRUE
        ];
        List<Id> freelanceResourceIds = new List<Id>();
        for (ServiceResource serviceResource : serviceResources) {
            freelanceResourceIds.add(serviceResource.Id);
        }

        //Runs through all AR records, and if the ServiceResource is a freelance interpreter, runs through the Interested Resources and checks for matches on SA and SR
        //If there is no match, an IR should be created.
        for (AssignedResource assignedResource : records) {
            if (freelanceResourceIds.contains(assignedResource.ServiceResourceId)) {
                Boolean shouldCreateInterestedResource = true;
                for (HOT_InterestedResource__c interestedResource : existingInterestedResources) {
                    if (
                        assignedResource.ServiceAppointmentId == interestedResource.ServiceAppointment__c &&
                        assignedResource.ServiceResourceId == interestedResource.ServiceResource__c
                    ) {
                        shouldCreateInterestedResource = false;
                        break;
                    }
                }
                if (shouldCreateInterestedResource) {
                    HOT_InterestedResource__c interestedResource = new HOT_InterestedResource__c();
                    interestedResource.ServiceAppointment__c = assignedResource.ServiceAppointmentId;
                    interestedResource.ServiceResource__c = assignedResource.ServiceResourceId;
                    interestedResource.Status__c = 'Assigned';
                    interestedResources.add(interestedResource);
                }
            }
        }
        return interestedResources;
    }

    static public List<HOT_InterestedResource__c> updateInterestedResourceStatus(
        List<AssignedResource> assignedResources
    ) {
        List<Id> serviceAppointmentIds = new List<Id>();
        for (AssignedResource assignedResource : assignedResources) {
            serviceAppointmentIds.add(assignedResource.ServiceAppointmentId);
        }
        List<HOT_InterestedResource__c> interestedResources = [
            SELECT Id, Status__c, ServiceAppointment__c, ServiceResource__c
            FROM HOT_InterestedResource__c
            WHERE ServiceAppointment__c IN :serviceAppointmentIds
        ];
        for (AssignedResource assignedResource : assignedResources) {
            for (HOT_InterestedResource__c interestedResource : interestedResources) {
                if (assignedResource.ServiceAppointmentId == interestedResource.ServiceAppointment__c) {
                    if (
                        interestedResource.ServiceResource__c == assignedResource.ServiceResourceId &&
                        interestedResource.Status__c != 'Assigned'
                    ) {
                        interestedResource.Status__c = 'Assigned';
                    } else if (
                        interestedResource.ServiceResource__c != assignedResource.ServiceResourceId &&
                        interestedResource.Status__c != 'Not Assigned'
                    ) {
                        interestedResource.Status__c = 'Not Assigned';
                    }
                }
            }
        }
        return interestedResources;
    }

    public static void setResourceFieldsOnServiceAppointment(List<AssignedResource> assignedResources) {
        List<Id> serviceAppointmentIds = new List<Id>();
        List<Id> serviceResourceIds = new List<Id>();
        for (AssignedResource assignedResource : assignedResources) {
            serviceAppointmentIds.add(assignedResource.ServiceAppointmentId);
            serviceResourceIds.add(assignedResource.ServiceResourceId);
        }
        Map<Id, ServiceAppointment> serviceAppointments = new Map<Id, ServiceAppointment>(
            [
                SELECT Id, HOT_IsReleasedToFreelance__c, HOT_IsEmployedInterpreter__c, ServiceTerritoryId, 
                EarliestStartTime, DueDate, SchedStartTime, SchedEndTime
                FROM ServiceAppointment
                WHERE Id IN :serviceAppointmentIds
            ]
        );
        Map<Id, ServiceResource> serviceResources = new Map<Id, ServiceResource>(
            [
                SELECT Id, HOT_IsFreelanceInterpreter__c, HOT_IsEmployedInterpreter__c, HOT_ServiceTerritory__r.Id
                FROM ServiceResource
                WHERE Id IN :serviceResourceIds
            ]
        );

        List<ServiceAppointment> serviceAppointmentsToUpdate = new List<ServiceAppointment>();
        for (AssignedResource assignedResource : assignedResources) {
            // Set Interpreter/Freelance fields
            if (
                serviceResources.get(assignedResource.ServiceResourceId).HOT_IsEmployedInterpreter__c !=
                serviceAppointments.get(assignedResource.ServiceAppointmentId).HOT_IsEmployedInterpreter__c
            ) {
                serviceAppointments.get(assignedResource.ServiceAppointmentId)
                    .HOT_IsEmployedInterpreter__c = serviceResources.get(assignedResource.ServiceResourceId)
                    .HOT_IsEmployedInterpreter__c;
                serviceAppointments.get(assignedResource.ServiceAppointmentId)
                    .HOT_IsReleasedToFreelance__c = serviceResources.get(assignedResource.ServiceResourceId)
                    .HOT_IsFreelanceInterpreter__c;
                serviceAppointmentsToUpdate.add(serviceAppointments.get(assignedResource.ServiceAppointmentId));
            }
            // Set ServiceTerritory
            if (
                serviceAppointments.get(assignedResource.ServiceAppointmentId).ServiceTerritoryId !=
                serviceResources.get(assignedResource.ServiceResourceId).HOT_ServiceTerritory__r.Id
            ) {
                serviceAppointments.get(assignedResource.ServiceAppointmentId)
                    .ServiceTerritoryId = serviceResources.get(assignedResource.ServiceResourceId)
                    .HOT_ServiceTerritory__c;
                serviceAppointmentsToUpdate.add(serviceAppointments.get(assignedResource.ServiceAppointmentId));
            }
            // Set SchedStartTime and SchedEndTime
            if (serviceAppointments.get(assignedResource.ServiceAppointmentId).EarliestStartTime != null) {
                serviceAppointments.get(assignedResource.ServiceAppointmentId)
                .SchedStartTime = serviceAppointments.get(assignedResource.ServiceAppointmentId).EarliestStartTime;
            }
            if (serviceAppointments.get(assignedResource.ServiceAppointmentId).DueDate != null) {
                serviceAppointments.get(assignedResource.ServiceAppointmentId)
                .SchedEndTime = serviceAppointments.get(assignedResource.ServiceAppointmentId).DueDate;
            }
        }
        update serviceAppointmentsToUpdate;
    }

    public static void notifyResource(List<AssignedResource> assignedResources) {
        CustomNotificationType notificationType = [
            SELECT Id, DeveloperName
            FROM CustomNotificationType
            WHERE DeveloperName = 'HOT_Service_Appointment_Changed'
        ];

        List<Id> serviceResourceIds = new List<Id>();
        List<Id> serviceAppointmentIds = new List<Id>();
        for (AssignedResource assignedResource : assignedResources) {
            serviceResourceIds.add(assignedResource.ServiceResourceId);
            serviceAppointmentIds.add(assignedResource.ServiceAppointmentId);
        }
        Map<Id, ServiceResource> serviceResources = new Map<Id, ServiceResource>(
            [SELECT Id, RelatedRecordId FROM ServiceResource WHERE Id IN :serviceResourceIds]
        );
        Map<Id, ServiceAppointment> serviceAppointments = new Map<Id, ServiceAppointment>(
            [
                SELECT Id, AppointmentNumber, EarliestStartTime, Status
                FROM ServiceAppointment
                WHERE Id IN :serviceAppointmentIds
            ]
        );

        for (AssignedResource assignedResource : assignedResources) {
            if (serviceAppointments.get(assignedResource.ServiceAppointmentId).Status != 'Scheduled') {
                HOT_ServiceAppointmentNotification.resourceChanged(
                    notificationType,
                    serviceAppointments.get(assignedResource.ServiceAppointmentId),
                    new Set<String>{ serviceResources.get(assignedResource.ServiceResourceId).RelatedRecordId }
                );
            }
        }
    }

    public static void throwExceptionIfARHasSAOverlap(List<AssignedResource> assignedResources, Boolean isUpdate) {
        List<Id> serviceAppointmentIds = new List<Id>();
        List<Id> serviceResourceIds = new List<Id>();
        for (AssignedResource assignedResource : assignedResources) {
            serviceAppointmentIds.add(assignedResource.ServiceAppointmentId);
            serviceResourceIds.add(assignedResource.ServiceResourceId);
        }

        List<String> exludedStatuses = new List<String>{ 'Annul', 'Canceled', 'Completed' };
        // Find all service appointments related to assigned resources
        Map<Id, ServiceAppointment> serviceAppointments = new Map<Id, ServiceAppointment>(
            [
                SELECT
                    Id,
                    HOT_AssignedResourceId__c,
                    HOT_ServiceResource__c,
                    HOT_NumberOfAssignedResources__c,
                    EarliestStartTime,
                    DueDate
                FROM ServiceAppointment
                WHERE Id IN :serviceAppointmentIds
            ]
        );

        // Find all service resources related to assigned resources
        Map<Id, ServiceResource> serviceResources = new Map<Id, ServiceResource>(
            [
                SELECT
                    Id,
                    (SELECT Id, EarliestStartTime, DueDate, HOT_ServiceResource__c FROM HOT_ServiceAppointments__r WHERE Status NOT IN :exludedStatuses)
                FROM ServiceResource
                WHERE Id IN :serviceResourceIds
            ]
        );

        // If new AR with SR is added from SA when AR on SA already exists - do not allow
        // If SR is changed on AR - allow - as long as time slot is available
        for (AssignedResource ar : assignedResources) {
            if (
                !isUpdate &&
                (serviceAppointments.get(ar.ServiceAppointmentId).HOT_AssignedResourceId__c != null ||
                serviceAppointments.get(ar.ServiceAppointmentId).HOT_NumberOfAssignedResources__c != 0)
            ) {
                ar.addError('Du kan ikke sette opp flere ressurser på et oppdrag.');
                continue;
            }
            // Check if AR already has service appointment overlapping with current SA - loop over list of related SAs on AR's related SR
            for (Integer i = 0; i < serviceResources.get(ar.ServiceResourceId).HOT_ServiceAppointments__r.size(); i++) {
                if (
                    HOT_DateTimeHandler.checkOverlappingDateTimes(
                        serviceResources.get(ar.ServiceResourceId).HOT_ServiceAppointments__r[i].EarliestStartTime,
                        serviceResources.get(ar.ServiceResourceId).HOT_ServiceAppointments__r[i].DueDate,
                        serviceAppointments.get(ar.ServiceAppointmentId).EarliestStartTime,
                        serviceAppointments.get(ar.ServiceAppointmentId).DueDate
                    )
                ) {
                    ar.addError('Ressursen har allerede et oppdrag i dette tidsrommet.');
                }
            }
        }
    }
}
